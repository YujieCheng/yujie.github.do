[{
		"title": "Sea.js - CMD规范",
		"introduce": "在 Sea.js 中，所有 JavaScript 模块都遵循 CMD（Common Module Definition） 模块定义规范。该规范明确了模块的基本书写格式和基本交互规则.",
		"time": "2016年6月5日18:35:21",
		"url": "html/detail.html?data=sea",
		"article": [{}
		]
	}, {
		"title": "require.js - AMD规范",
		"introduce": "异步模块定义（AMD)的API指定了一种定义模块的规范，使得模块及其依赖关系可以被异步加载。浏览器的同步加载导致了性能、可用性、调试和跨域访问问题，而AMD规范就能解决这些问题，使得浏览器的可以异步加载。...",
		"time": "2016年6月25日9:35:21",
		"url": "html/detail.html?data=require",
		"article": [{}
		]
	}, {
		"title": "require.js - 实战",
		"introduce": "最近项目中使用过了requirejs，有点想法跟大家分享一下，requirejs在实际应用中有很多的好处，比如传统的映入js的方法是添加n多的script标签",
		"time": "2016年6月28日18:35:21",
		"url": "html/detail.html?data=requireinaction",
		"article": [{}
		]
	}, {
		"title": "TypeScript - 数据类型",
		"introduce": "TeypeScript 是 Javascript 的超集（超集的意思就是 Javascript 是它的子集），它可以编译成纯的 Javascript 。",
		"time": "2017年9月5日18:35:21",
		"url": "html/detail.html?data=TypeScript",
		"article": [{}
		]
	}, {
		"title": "TypeScript - 变量声明",
		"introduce": "这几年一直写js代码都忘记了c语言中怎么声明变量了，当然也忘记了变量的各种定义域，渐渐习惯了js中诡异的定义域。如果一直写js代码倒是没有任何问题，但是一旦去写别的代码，就会出现很多问题。 TypeScript 中引入 let 关键字，有着严格的作用域规范，当然和es6 中的let的用法一样的。",
		"time": "2017年9月6日18:35:21",
		"url": "html/detail.html?data=TypeScript1",
		"article": [{}
		]
	}, {
		"title": "TypeScript - 接口",
		"introduce": "本章节将要学习的是接口，接口是什么，接口是实体提供给外界的一种抽象化概念。",
		"time": "2017年9月6日18:35:21",
		"url": "html/detail.html?data=TypeScript2",
		"article": [{}]
	}
]
